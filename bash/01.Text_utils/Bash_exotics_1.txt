
When to Use Awk vs. Sed

    Use awk when dealing with tasks that require filtering, data extraction, or arithmetic operations.
    Opt for sed for straightforward text transformations like substitutions, deletions, or insertions.

===============================
## Bash strings
https://catonmat.net/bash-one-liners-explained-part-one
https://catonmat.net/bash-one-liners-explained-part-two
https://catonmat.net/books

##Split a string on a given character
$ IFS=- read -r x y z <<< "$str"

##split fields and put them in an array:
$ IFS=- read -ra parts <<< "foo-bar-baz"

##Process a string character by character

$ while IFS= read -rn1 c; do
    # do something with $c
done <<< "$str"

##Produce 10 copies of the same string
$ echo foo{,,,,,,,,,,}

Extract a substring from a string

$ str="hello world"
$ echo ${str:6}

Find the length of the string

$ echo ${#str}

===============================
*Sort uniq
–Top ten largest directories in your current directory with human-readable output, 
du -chx | sort -rh | head

–find duplicates in a set of files quickly by adding the -d option:
sort namelist1.txt namelist2.txt | uniq -d

most duplicates to bubble up to the top. Fortunately, you have the sort command:
sort namelist1.txt namelist2.txt | uniq -c | sort -nr

*Find only duplicate rows
cat largefile|sort|uniq -c|awk '{if($1 !=1) print}'

cat largefile|sort|uniq -d

--If ID's are not of same length
sort file| uniq -Dw 8

=============================
##converters

--hex to ascii
cat xx| xxd -r -p

-r converts hex to binary
-p prints result in plain text format

printf "\x4E"
echo -e "\x4E"


--ascii table

awk 'BEGIN{for(i=32;i<127;i++) printf("%3d  0x%02x  %c",i,i,i)'


#!/bin/bash

echo "DECIMAL -> HEX -> ASCII"
awk 'BEGIN{for(i=32;i<127;i++) printf("%3d  0x%02x  %c",i,i,i)'|pr -t6 -w78


---------------------------------------------------



---------------------------------------------------
---------------------------------------------------
---------------------------------------------------


---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------


















---------------------------------------------------

---------------------------------------------------
---------------------------------------------------
---------------------------------------------------
---------------------------------------------------


