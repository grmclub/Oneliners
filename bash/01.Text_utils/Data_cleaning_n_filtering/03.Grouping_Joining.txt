--Which -regex is faster
https://www.biostars.org/p/44123/#44168

-regex performance 
https://swtch.com/~rsc/regexp/regexp1.html


--Check links
https://linuxhandbook.com/awk-command-tutorial/
https://likegeeks.com/awk-command/
https://www.theunixschool.com/2012/06/awk-10-examples-to-group-data-in-csv-or.html
https://www.gnu.org/software/coreutils/manual/html_node/index.html
https://developer.ibm.com/?q=Linux

https://dev.to/amalshehu/advanced-data-processing-with-awk-and-sed-4f2b
-------------------------------------------------------------
##Group on a single field
cat xx|awk -F'.' -vOFS=',' '{s[$1]+=$2;} END{ for(i in s) print i,s[i];}'

##Group multiple fields and aggregate data
awk -F',' -vOFS=',' 'NR>1{ s[$1","$6] +=$3;} END{ for(I in s){ print i, s[i]}}'| sort -t',' -k1

##Summarizing Data of Specific Fields
awk -F, '$2 == "Product123" {total += $3 * $4} END {print "Total Sales for Product123: ", total}' sales.log

##Ex: Grouping data from multiple
https://unix.stackexchange.com/questions/336144/group-a-files-contents-by-two-fields-and-sum-a-third-field

awk -F'~' 'BEGIN { SUBSEP = OFS = FS } { s[$1,$2] += $3; ++c[$1,$2] } END { for (i in s) { print i, s[i], c[i] } }' file
AAA~111~6~3
BBB~111~2~1
AAA~222~2~1
You could also choose a tool like GNU datamash, which knows how to calculate basic things like sums etc. on data in simple record formats:

$ datamash -t '~' -s groupby 1,2 sum 3 count 3 <file
AAA~111~6~3
AAA~222~2~1
BBB~111~2~1

-------------------------------------------------------------
#buy sell sum - Aggregation of a single column
cat file.in|awk '{ ($3 == "1" ? sum_b +=$5 : sum_s +=$5); } END{ print sum_b, sum_s; }' 


-------------------------------------------------------------
##Join files
join -a1 -e0 -t',' -o 1.1,2.2,2.3 x y 

https://linux.die.net/man/1/join
* Commonly used parameters
    -a Includes unpairable lines from file
    -v Displays unpairable lines
	
	This will include lines from file1.txt that do not have a matching line in file2.txt.	
	join -a 1 file1.txt file2.txt	
	join -v 1 file1.txt file2.txt

* Other supported parameters

    1 FIELD Join on this FIELD number for file 1
    2 FIELD Join on this FIELD number for file 2
    e STRING Replace missing input fields with STRING
    i Ignore case differences
    t CHAR Use CHAR as input and output field separator

## Sort Files & join examples 	
join -t'|' -12 <(sort -t'|' -k2 file1) file2	
join -j 1 <(sort file1.txt) <(sort file2.txt)

##Outer joins

--right outer join -a2
join -t '|'  file1 file2 -a2

Options used:

t: Delimiter.
a: Decides the file number from which the unpaired lines have to be printed.

##join with bash tools
cat file2 | while read line; do
    grep $line file1 # or whatever you want to do with the $line variable
done

===================
--sample data

File 1:
01|a|jack|d
02|b|ron|c
03|d|tom|e

File 2:
01|a|nemesis|f
02|b|brave|d
04|d|gorr|h

output:
01|a|jack|d|nemesis|f
02|b|ron|c|brave|d
03|d|tom|e||
===================

## left outer join -a1

--format data
sed 's/|/:/2' file1 | sort -t: >file1.tmp
sed 's/|/:/2' file2 | sort -t: >file2.tmp
join -t':' file1.tmp file2.tmp -a1 -e'|' -o'0,1.2,2.2' | tr ':' '|'

's/|/:/2' replaces the second occurrence of pipe with colon on each line in file.

file1.tmp

01|a:jack|d
02|b:ron|c
03|d:tom|e

file2.tmp

01|a:nemesis|f
02|b:brave|d
04|d:gorr|h

output file
01|a|jack|d|nemesis|f
02|b|ron|c|brave|d
03|d|tom|e||


-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------

-------------------------------------------------------------
